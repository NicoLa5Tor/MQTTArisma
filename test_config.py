#!/usr/bin/env python3
"""
Script de prueba para verificar que la configuraci√≥n centralizada funciona correctamente
"""

import sys
import os

# Agregar el directorio actual al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config import AppConfig
from utils.redis_queue_manager import RedisQueueManager

def test_configuration():
    """Probar que la configuraci√≥n centralizada funciona correctamente"""
    print("üß™ Probando configuraci√≥n centralizada...")
    print("=" * 50)
    
    try:
        # Crear configuraci√≥n
        config = AppConfig()
        
        # Probar configuraci√≥n MQTT
        print(f"üì° MQTT Configuration:")
        print(f"  ‚Ä¢ Broker: {config.mqtt.broker}:{config.mqtt.port}")
        print(f"  ‚Ä¢ Username: {config.mqtt.username}")
        print(f"  ‚Ä¢ Client ID: {config.mqtt.client_id}")
        print(f"  ‚Ä¢ Topic: {config.mqtt.topic}")
        print()
        
        # Probar configuraci√≥n Backend
        print(f"üñ•Ô∏è Backend Configuration:")
        print(f"  ‚Ä¢ URL: {config.backend.base_url}")
        print(f"  ‚Ä¢ Timeout: {config.backend.timeout}s")
        print(f"  ‚Ä¢ Retry attempts: {config.backend.retry_attempts}")
        print(f"  ‚Ä¢ Enabled: {config.backend.enabled}")
        print()
        
        # Probar configuraci√≥n WhatsApp
        print(f"üì± WhatsApp Configuration:")
        print(f"  ‚Ä¢ API URL: {config.whatsapp.api_url}")
        print(f"  ‚Ä¢ Timeout: {config.whatsapp.timeout}s")
        print(f"  ‚Ä¢ Enabled: {config.whatsapp.enabled}")
        print()
        
        # Probar configuraci√≥n WebSocket
        print(f"üîå WebSocket Configuration:")
        print(f"  ‚Ä¢ Host: {config.websocket.host}")
        print(f"  ‚Ä¢ Port: {config.websocket.port}")
        print(f"  ‚Ä¢ Ping interval: {config.websocket.ping_interval}s")
        print(f"  ‚Ä¢ Ping timeout: {config.websocket.ping_timeout}s")
        print(f"  ‚Ä¢ Enabled: {config.websocket.enabled}")
        print()
        
        # Probar configuraci√≥n Redis
        print(f"üìä Redis Configuration:")
        print(f"  ‚Ä¢ Host: {config.redis.host}:{config.redis.port}")
        print(f"  ‚Ä¢ Database: {config.redis.db}")
        print(f"  ‚Ä¢ Password: {'***' if config.redis.password else 'None'}")
        print(f"  ‚Ä¢ Queue name: {config.redis.whatsapp_queue_name}")
        print(f"  ‚Ä¢ Workers: {config.redis.whatsapp_workers}")
        print(f"  ‚Ä¢ Queue TTL: {config.redis.whatsapp_queue_ttl}s")
        print()
        
        # Probar configuraci√≥n general
        print(f"‚öôÔ∏è General Configuration:")
        print(f"  ‚Ä¢ Log level: {config.log_level}")
        print(f"  ‚Ä¢ Message interval: {config.message_interval}s")
        print()
        
        print("‚úÖ Todas las configuraciones cargadas correctamente!")
        print("‚úÖ Ya no se usa os.getenv() directamente en el c√≥digo principal")
        print("‚úÖ La configuraci√≥n est√° centralizada y es m√°s segura")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def test_redis_queue_manager():
    """Probar que RedisQueueManager funciona con RedisConfig"""
    print("üß™ Probando RedisQueueManager...")
    print("=" * 50)
    
    try:
        # Crear configuraci√≥n
        config = AppConfig()
        
        # Crear RedisQueueManager con RedisConfig
        redis_queue = RedisQueueManager(config.redis)
        
        print(f"üìä RedisQueueManager creado exitosamente:")
        print(f"  ‚Ä¢ Host: {redis_queue.redis_host}:{redis_queue.redis_port}")
        print(f"  ‚Ä¢ Database: {redis_queue.redis_db}")
        print(f"  ‚Ä¢ Queue name: {redis_queue.queue_name}")
        print(f"  ‚Ä¢ Workers: {redis_queue.workers_count}")
        print(f"  ‚Ä¢ TTL: {redis_queue.message_ttl}s")
        print()
        
        # Probar salud de Redis
        is_healthy = redis_queue.is_healthy()
        if is_healthy:
            print("‚úÖ Redis est√° disponible y saludable")
        else:
            print("‚ö†Ô∏è Redis no est√° disponible (fallback normal)")
        
        print("‚úÖ RedisQueueManager funciona correctamente con RedisConfig!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando RedisQueueManager: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas...\n")
    
    tests = [
        ("Configuraci√≥n", test_configuration),
        ("RedisQueueManager", test_redis_queue_manager)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name}: PAS√ì\n")
        else:
            print(f"‚ùå {test_name}: FALL√ì\n")
    
    print(f"üìä Resumen: {passed}/{total} pruebas pasaron")
    sys.exit(0 if passed == total else 1)
